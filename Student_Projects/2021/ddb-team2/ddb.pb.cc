// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ddb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTempTableRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTempTableRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTempTableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTempTableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecuteNonQuerySQLRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecuteNonQuerySQLRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecuteNonQuerySQLResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecuteNonQuerySQLResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecuteQuerySQLRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecuteQuerySQLRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecuteQuerySQLResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecuteQuerySQLResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* sql_service_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ddb_2eproto() {
  protobuf_AddDesc_ddb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ddb.proto");
  GOOGLE_CHECK(file != NULL);
  NodeRequest_descriptor_ = file->message_type(0);
  static const int NodeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, temp_table_name_),
  };
  NodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRequest_descriptor_,
      NodeRequest::default_instance_,
      NodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRequest));
  NodeResponse_descriptor_ = file->message_type(1);
  static const int NodeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeResponse, table_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeResponse, table_values_),
  };
  NodeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeResponse_descriptor_,
      NodeResponse::default_instance_,
      NodeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeResponse));
  ImportDataRequest_descriptor_ = file->message_type(2);
  static const int ImportDataRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDataRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDataRequest, table_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDataRequest, table_values_),
  };
  ImportDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImportDataRequest_descriptor_,
      ImportDataRequest::default_instance_,
      ImportDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImportDataRequest));
  ImportDataResponse_descriptor_ = file->message_type(3);
  static const int ImportDataResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDataResponse, result_),
  };
  ImportDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImportDataResponse_descriptor_,
      ImportDataResponse::default_instance_,
      ImportDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImportDataResponse));
  DeleteTempTableRequest_descriptor_ = file->message_type(4);
  static const int DeleteTempTableRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableRequest, temp_table_name_),
  };
  DeleteTempTableRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTempTableRequest_descriptor_,
      DeleteTempTableRequest::default_instance_,
      DeleteTempTableRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTempTableRequest));
  DeleteTempTableResponse_descriptor_ = file->message_type(5);
  static const int DeleteTempTableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableResponse, result_),
  };
  DeleteTempTableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTempTableResponse_descriptor_,
      DeleteTempTableResponse::default_instance_,
      DeleteTempTableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTempTableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTempTableResponse));
  ExecuteNonQuerySQLRequest_descriptor_ = file->message_type(6);
  static const int ExecuteNonQuerySQLRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteNonQuerySQLRequest, sql_query_),
  };
  ExecuteNonQuerySQLRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecuteNonQuerySQLRequest_descriptor_,
      ExecuteNonQuerySQLRequest::default_instance_,
      ExecuteNonQuerySQLRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteNonQuerySQLRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteNonQuerySQLRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecuteNonQuerySQLRequest));
  ExecuteNonQuerySQLResponse_descriptor_ = file->message_type(7);
  static const int ExecuteNonQuerySQLResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteNonQuerySQLResponse, result_),
  };
  ExecuteNonQuerySQLResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecuteNonQuerySQLResponse_descriptor_,
      ExecuteNonQuerySQLResponse::default_instance_,
      ExecuteNonQuerySQLResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteNonQuerySQLResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteNonQuerySQLResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecuteNonQuerySQLResponse));
  ExecuteQuerySQLRequest_descriptor_ = file->message_type(8);
  static const int ExecuteQuerySQLRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteQuerySQLRequest, sql_),
  };
  ExecuteQuerySQLRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecuteQuerySQLRequest_descriptor_,
      ExecuteQuerySQLRequest::default_instance_,
      ExecuteQuerySQLRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteQuerySQLRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteQuerySQLRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecuteQuerySQLRequest));
  ExecuteQuerySQLResponse_descriptor_ = file->message_type(9);
  static const int ExecuteQuerySQLResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteQuerySQLResponse, table_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteQuerySQLResponse, table_values_),
  };
  ExecuteQuerySQLResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecuteQuerySQLResponse_descriptor_,
      ExecuteQuerySQLResponse::default_instance_,
      ExecuteQuerySQLResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteQuerySQLResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecuteQuerySQLResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecuteQuerySQLResponse));
  sql_service_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ddb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRequest_descriptor_, &NodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeResponse_descriptor_, &NodeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImportDataRequest_descriptor_, &ImportDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImportDataResponse_descriptor_, &ImportDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTempTableRequest_descriptor_, &DeleteTempTableRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTempTableResponse_descriptor_, &DeleteTempTableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecuteNonQuerySQLRequest_descriptor_, &ExecuteNonQuerySQLRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecuteNonQuerySQLResponse_descriptor_, &ExecuteNonQuerySQLResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecuteQuerySQLRequest_descriptor_, &ExecuteQuerySQLRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecuteQuerySQLResponse_descriptor_, &ExecuteQuerySQLResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ddb_2eproto() {
  delete NodeRequest::default_instance_;
  delete NodeRequest_reflection_;
  delete NodeResponse::default_instance_;
  delete NodeResponse_reflection_;
  delete ImportDataRequest::default_instance_;
  delete ImportDataRequest_reflection_;
  delete ImportDataResponse::default_instance_;
  delete ImportDataResponse_reflection_;
  delete DeleteTempTableRequest::default_instance_;
  delete DeleteTempTableRequest_reflection_;
  delete DeleteTempTableResponse::default_instance_;
  delete DeleteTempTableResponse_reflection_;
  delete ExecuteNonQuerySQLRequest::default_instance_;
  delete ExecuteNonQuerySQLRequest_reflection_;
  delete ExecuteNonQuerySQLResponse::default_instance_;
  delete ExecuteNonQuerySQLResponse_reflection_;
  delete ExecuteQuerySQLRequest::default_instance_;
  delete ExecuteQuerySQLRequest_reflection_;
  delete ExecuteQuerySQLResponse::default_instance_;
  delete ExecuteQuerySQLResponse_reflection_;
}

void protobuf_AddDesc_ddb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tddb.proto\"&\n\013NodeRequest\022\027\n\017temp_table"
    "_name\030\001 \001(\t\":\n\014NodeResponse\022\024\n\014table_fie"
    "lds\030\001 \001(\t\022\024\n\014table_values\030\002 \003(\t\"S\n\021Impor"
    "tDataRequest\022\022\n\ntable_name\030\001 \001(\t\022\024\n\014tabl"
    "e_fields\030\002 \001(\t\022\024\n\014table_values\030\003 \003(\t\"$\n\022"
    "ImportDataResponse\022\016\n\006result\030\001 \001(\t\"1\n\026De"
    "leteTempTableRequest\022\027\n\017temp_table_name\030"
    "\001 \001(\t\")\n\027DeleteTempTableResponse\022\016\n\006resu"
    "lt\030\001 \001(\t\".\n\031ExecuteNonQuerySQLRequest\022\021\n"
    "\tsql_query\030\001 \001(\t\",\n\032ExecuteNonQuerySQLRe"
    "sponse\022\016\n\006result\030\001 \001(\t\"%\n\026ExecuteQuerySQ"
    "LRequest\022\013\n\003sql\030\001 \001(\t\"E\n\027ExecuteQuerySQL"
    "Response\022\024\n\014table_fields\030\001 \001(\t\022\024\n\014table_"
    "values\030\002 \003(\t2\307\002\n\013sql_service\022*\n\013RequestN"
    "ode\022\014.NodeRequest\032\r.NodeResponse\0225\n\nImpo"
    "rtData\022\022.ImportDataRequest\032\023.ImportDataR"
    "esponse\022@\n\013DeleteTable\022\027.DeleteTempTable"
    "Request\032\030.DeleteTempTableResponse\022M\n\022Exe"
    "cuteNonQuerySQL\022\032.ExecuteNonQuerySQLRequ"
    "est\032\033.ExecuteNonQuerySQLResponse\022D\n\017Exec"
    "uteQuerySQL\022\027.ExecuteQuerySQLRequest\032\030.E"
    "xecuteQuerySQLResponseB\003\200\001\001", 867);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ddb.proto", &protobuf_RegisterTypes);
  NodeRequest::default_instance_ = new NodeRequest();
  NodeResponse::default_instance_ = new NodeResponse();
  ImportDataRequest::default_instance_ = new ImportDataRequest();
  ImportDataResponse::default_instance_ = new ImportDataResponse();
  DeleteTempTableRequest::default_instance_ = new DeleteTempTableRequest();
  DeleteTempTableResponse::default_instance_ = new DeleteTempTableResponse();
  ExecuteNonQuerySQLRequest::default_instance_ = new ExecuteNonQuerySQLRequest();
  ExecuteNonQuerySQLResponse::default_instance_ = new ExecuteNonQuerySQLResponse();
  ExecuteQuerySQLRequest::default_instance_ = new ExecuteQuerySQLRequest();
  ExecuteQuerySQLResponse::default_instance_ = new ExecuteQuerySQLResponse();
  NodeRequest::default_instance_->InitAsDefaultInstance();
  NodeResponse::default_instance_->InitAsDefaultInstance();
  ImportDataRequest::default_instance_->InitAsDefaultInstance();
  ImportDataResponse::default_instance_->InitAsDefaultInstance();
  DeleteTempTableRequest::default_instance_->InitAsDefaultInstance();
  DeleteTempTableResponse::default_instance_->InitAsDefaultInstance();
  ExecuteNonQuerySQLRequest::default_instance_->InitAsDefaultInstance();
  ExecuteNonQuerySQLResponse::default_instance_->InitAsDefaultInstance();
  ExecuteQuerySQLRequest::default_instance_->InitAsDefaultInstance();
  ExecuteQuerySQLResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ddb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ddb_2eproto {
  StaticDescriptorInitializer_ddb_2eproto() {
    protobuf_AddDesc_ddb_2eproto();
  }
} static_descriptor_initializer_ddb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NodeRequest::kTempTableNameFieldNumber;
#endif  // !_MSC_VER

NodeRequest::NodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRequest::InitAsDefaultInstance() {
}

NodeRequest::NodeRequest(const NodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRequest::SharedCtor() {
  _cached_size_ = 0;
  temp_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRequest::~NodeRequest() {
  SharedDtor();
}

void NodeRequest::SharedDtor() {
  if (temp_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_table_name_;
  }
  if (this != default_instance_) {
  }
}

void NodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRequest_descriptor_;
}

const NodeRequest& NodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

NodeRequest* NodeRequest::default_instance_ = NULL;

NodeRequest* NodeRequest::New() const {
  return new NodeRequest;
}

void NodeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_temp_table_name()) {
      if (temp_table_name_ != &::google::protobuf::internal::kEmptyString) {
        temp_table_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string temp_table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->temp_table_name().data(), this->temp_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string temp_table_name = 1;
  if (has_temp_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp_table_name().data(), this->temp_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->temp_table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string temp_table_name = 1;
  if (has_temp_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp_table_name().data(), this->temp_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->temp_table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string temp_table_name = 1;
    if (has_temp_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->temp_table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRequest::MergeFrom(const NodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temp_table_name()) {
      set_temp_table_name(from.temp_table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRequest::CopyFrom(const NodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRequest::IsInitialized() const {

  return true;
}

void NodeRequest::Swap(NodeRequest* other) {
  if (other != this) {
    std::swap(temp_table_name_, other->temp_table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRequest_descriptor_;
  metadata.reflection = NodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeResponse::kTableFieldsFieldNumber;
const int NodeResponse::kTableValuesFieldNumber;
#endif  // !_MSC_VER

NodeResponse::NodeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeResponse::InitAsDefaultInstance() {
}

NodeResponse::NodeResponse(const NodeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeResponse::SharedCtor() {
  _cached_size_ = 0;
  table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeResponse::~NodeResponse() {
  SharedDtor();
}

void NodeResponse::SharedDtor() {
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    delete table_fields_;
  }
  if (this != default_instance_) {
  }
}

void NodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeResponse_descriptor_;
}

const NodeResponse& NodeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

NodeResponse* NodeResponse::default_instance_ = NULL;

NodeResponse* NodeResponse::New() const {
  return new NodeResponse;
}

void NodeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_fields()) {
      if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
        table_fields_->clear();
      }
    }
  }
  table_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_fields().data(), this->table_fields().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_values;
        break;
      }

      // repeated string table_values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_table_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_values(this->table_values_size() - 1).data(),
            this->table_values(this->table_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_fields = 1;
  if (has_table_fields()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_fields().data(), this->table_fields().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_fields(), output);
  }

  // repeated string table_values = 2;
  for (int i = 0; i < this->table_values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->table_values(i).data(), this->table_values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_fields = 1;
  if (has_table_fields()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_fields().data(), this->table_fields().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_fields(), target);
  }

  // repeated string table_values = 2;
  for (int i = 0; i < this->table_values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_values(i).data(), this->table_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->table_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_fields = 1;
    if (has_table_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_fields());
    }

  }
  // repeated string table_values = 2;
  total_size += 1 * this->table_values_size();
  for (int i = 0; i < this->table_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->table_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeResponse::MergeFrom(const NodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_values_.MergeFrom(from.table_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_fields()) {
      set_table_fields(from.table_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeResponse::CopyFrom(const NodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeResponse::IsInitialized() const {

  return true;
}

void NodeResponse::Swap(NodeResponse* other) {
  if (other != this) {
    std::swap(table_fields_, other->table_fields_);
    table_values_.Swap(&other->table_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeResponse_descriptor_;
  metadata.reflection = NodeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImportDataRequest::kTableNameFieldNumber;
const int ImportDataRequest::kTableFieldsFieldNumber;
const int ImportDataRequest::kTableValuesFieldNumber;
#endif  // !_MSC_VER

ImportDataRequest::ImportDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImportDataRequest::InitAsDefaultInstance() {
}

ImportDataRequest::ImportDataRequest(const ImportDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImportDataRequest::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportDataRequest::~ImportDataRequest() {
  SharedDtor();
}

void ImportDataRequest::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    delete table_fields_;
  }
  if (this != default_instance_) {
  }
}

void ImportDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportDataRequest_descriptor_;
}

const ImportDataRequest& ImportDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

ImportDataRequest* ImportDataRequest::default_instance_ = NULL;

ImportDataRequest* ImportDataRequest::New() const {
  return new ImportDataRequest;
}

void ImportDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_table_fields()) {
      if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
        table_fields_->clear();
      }
    }
  }
  table_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImportDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_fields;
        break;
      }

      // optional string table_fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_fields().data(), this->table_fields().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_values;
        break;
      }

      // repeated string table_values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_table_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_values(this->table_values_size() - 1).data(),
            this->table_values(this->table_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImportDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // optional string table_fields = 2;
  if (has_table_fields()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_fields().data(), this->table_fields().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_fields(), output);
  }

  // repeated string table_values = 3;
  for (int i = 0; i < this->table_values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->table_values(i).data(), this->table_values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->table_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImportDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // optional string table_fields = 2;
  if (has_table_fields()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_fields().data(), this->table_fields().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_fields(), target);
  }

  // repeated string table_values = 3;
  for (int i = 0; i < this->table_values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_values(i).data(), this->table_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->table_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImportDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // optional string table_fields = 2;
    if (has_table_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_fields());
    }

  }
  // repeated string table_values = 3;
  total_size += 1 * this->table_values_size();
  for (int i = 0; i < this->table_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->table_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImportDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImportDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImportDataRequest::MergeFrom(const ImportDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_values_.MergeFrom(from.table_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_table_fields()) {
      set_table_fields(from.table_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImportDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportDataRequest::CopyFrom(const ImportDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportDataRequest::IsInitialized() const {

  return true;
}

void ImportDataRequest::Swap(ImportDataRequest* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(table_fields_, other->table_fields_);
    table_values_.Swap(&other->table_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImportDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportDataRequest_descriptor_;
  metadata.reflection = ImportDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImportDataResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ImportDataResponse::ImportDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImportDataResponse::InitAsDefaultInstance() {
}

ImportDataResponse::ImportDataResponse(const ImportDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImportDataResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportDataResponse::~ImportDataResponse() {
  SharedDtor();
}

void ImportDataResponse::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void ImportDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportDataResponse_descriptor_;
}

const ImportDataResponse& ImportDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

ImportDataResponse* ImportDataResponse::default_instance_ = NULL;

ImportDataResponse* ImportDataResponse::New() const {
  return new ImportDataResponse;
}

void ImportDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImportDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImportDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImportDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImportDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImportDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImportDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImportDataResponse::MergeFrom(const ImportDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImportDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportDataResponse::CopyFrom(const ImportDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportDataResponse::IsInitialized() const {

  return true;
}

void ImportDataResponse::Swap(ImportDataResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImportDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportDataResponse_descriptor_;
  metadata.reflection = ImportDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTempTableRequest::kTempTableNameFieldNumber;
#endif  // !_MSC_VER

DeleteTempTableRequest::DeleteTempTableRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTempTableRequest::InitAsDefaultInstance() {
}

DeleteTempTableRequest::DeleteTempTableRequest(const DeleteTempTableRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTempTableRequest::SharedCtor() {
  _cached_size_ = 0;
  temp_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTempTableRequest::~DeleteTempTableRequest() {
  SharedDtor();
}

void DeleteTempTableRequest::SharedDtor() {
  if (temp_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_table_name_;
  }
  if (this != default_instance_) {
  }
}

void DeleteTempTableRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTempTableRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTempTableRequest_descriptor_;
}

const DeleteTempTableRequest& DeleteTempTableRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

DeleteTempTableRequest* DeleteTempTableRequest::default_instance_ = NULL;

DeleteTempTableRequest* DeleteTempTableRequest::New() const {
  return new DeleteTempTableRequest;
}

void DeleteTempTableRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_temp_table_name()) {
      if (temp_table_name_ != &::google::protobuf::internal::kEmptyString) {
        temp_table_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTempTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string temp_table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_temp_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->temp_table_name().data(), this->temp_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTempTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string temp_table_name = 1;
  if (has_temp_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp_table_name().data(), this->temp_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->temp_table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTempTableRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string temp_table_name = 1;
  if (has_temp_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->temp_table_name().data(), this->temp_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->temp_table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTempTableRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string temp_table_name = 1;
    if (has_temp_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->temp_table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTempTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTempTableRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTempTableRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTempTableRequest::MergeFrom(const DeleteTempTableRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temp_table_name()) {
      set_temp_table_name(from.temp_table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTempTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTempTableRequest::CopyFrom(const DeleteTempTableRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTempTableRequest::IsInitialized() const {

  return true;
}

void DeleteTempTableRequest::Swap(DeleteTempTableRequest* other) {
  if (other != this) {
    std::swap(temp_table_name_, other->temp_table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTempTableRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTempTableRequest_descriptor_;
  metadata.reflection = DeleteTempTableRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTempTableResponse::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteTempTableResponse::DeleteTempTableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteTempTableResponse::InitAsDefaultInstance() {
}

DeleteTempTableResponse::DeleteTempTableResponse(const DeleteTempTableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteTempTableResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTempTableResponse::~DeleteTempTableResponse() {
  SharedDtor();
}

void DeleteTempTableResponse::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void DeleteTempTableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTempTableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTempTableResponse_descriptor_;
}

const DeleteTempTableResponse& DeleteTempTableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

DeleteTempTableResponse* DeleteTempTableResponse::default_instance_ = NULL;

DeleteTempTableResponse* DeleteTempTableResponse::New() const {
  return new DeleteTempTableResponse;
}

void DeleteTempTableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTempTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteTempTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteTempTableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteTempTableResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTempTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTempTableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTempTableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTempTableResponse::MergeFrom(const DeleteTempTableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTempTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTempTableResponse::CopyFrom(const DeleteTempTableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTempTableResponse::IsInitialized() const {

  return true;
}

void DeleteTempTableResponse::Swap(DeleteTempTableResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTempTableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTempTableResponse_descriptor_;
  metadata.reflection = DeleteTempTableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecuteNonQuerySQLRequest::kSqlQueryFieldNumber;
#endif  // !_MSC_VER

ExecuteNonQuerySQLRequest::ExecuteNonQuerySQLRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecuteNonQuerySQLRequest::InitAsDefaultInstance() {
}

ExecuteNonQuerySQLRequest::ExecuteNonQuerySQLRequest(const ExecuteNonQuerySQLRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecuteNonQuerySQLRequest::SharedCtor() {
  _cached_size_ = 0;
  sql_query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecuteNonQuerySQLRequest::~ExecuteNonQuerySQLRequest() {
  SharedDtor();
}

void ExecuteNonQuerySQLRequest::SharedDtor() {
  if (sql_query_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_query_;
  }
  if (this != default_instance_) {
  }
}

void ExecuteNonQuerySQLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteNonQuerySQLRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuteNonQuerySQLRequest_descriptor_;
}

const ExecuteNonQuerySQLRequest& ExecuteNonQuerySQLRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

ExecuteNonQuerySQLRequest* ExecuteNonQuerySQLRequest::default_instance_ = NULL;

ExecuteNonQuerySQLRequest* ExecuteNonQuerySQLRequest::New() const {
  return new ExecuteNonQuerySQLRequest;
}

void ExecuteNonQuerySQLRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sql_query()) {
      if (sql_query_ != &::google::protobuf::internal::kEmptyString) {
        sql_query_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecuteNonQuerySQLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sql_query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql_query().data(), this->sql_query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecuteNonQuerySQLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sql_query = 1;
  if (has_sql_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql_query().data(), this->sql_query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sql_query(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecuteNonQuerySQLRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sql_query = 1;
  if (has_sql_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql_query().data(), this->sql_query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql_query(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecuteNonQuerySQLRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sql_query = 1;
    if (has_sql_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql_query());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteNonQuerySQLRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecuteNonQuerySQLRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecuteNonQuerySQLRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecuteNonQuerySQLRequest::MergeFrom(const ExecuteNonQuerySQLRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sql_query()) {
      set_sql_query(from.sql_query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecuteNonQuerySQLRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteNonQuerySQLRequest::CopyFrom(const ExecuteNonQuerySQLRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteNonQuerySQLRequest::IsInitialized() const {

  return true;
}

void ExecuteNonQuerySQLRequest::Swap(ExecuteNonQuerySQLRequest* other) {
  if (other != this) {
    std::swap(sql_query_, other->sql_query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecuteNonQuerySQLRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecuteNonQuerySQLRequest_descriptor_;
  metadata.reflection = ExecuteNonQuerySQLRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecuteNonQuerySQLResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ExecuteNonQuerySQLResponse::ExecuteNonQuerySQLResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecuteNonQuerySQLResponse::InitAsDefaultInstance() {
}

ExecuteNonQuerySQLResponse::ExecuteNonQuerySQLResponse(const ExecuteNonQuerySQLResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecuteNonQuerySQLResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecuteNonQuerySQLResponse::~ExecuteNonQuerySQLResponse() {
  SharedDtor();
}

void ExecuteNonQuerySQLResponse::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void ExecuteNonQuerySQLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteNonQuerySQLResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuteNonQuerySQLResponse_descriptor_;
}

const ExecuteNonQuerySQLResponse& ExecuteNonQuerySQLResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

ExecuteNonQuerySQLResponse* ExecuteNonQuerySQLResponse::default_instance_ = NULL;

ExecuteNonQuerySQLResponse* ExecuteNonQuerySQLResponse::New() const {
  return new ExecuteNonQuerySQLResponse;
}

void ExecuteNonQuerySQLResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecuteNonQuerySQLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecuteNonQuerySQLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecuteNonQuerySQLResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecuteNonQuerySQLResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteNonQuerySQLResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecuteNonQuerySQLResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecuteNonQuerySQLResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecuteNonQuerySQLResponse::MergeFrom(const ExecuteNonQuerySQLResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecuteNonQuerySQLResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteNonQuerySQLResponse::CopyFrom(const ExecuteNonQuerySQLResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteNonQuerySQLResponse::IsInitialized() const {

  return true;
}

void ExecuteNonQuerySQLResponse::Swap(ExecuteNonQuerySQLResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecuteNonQuerySQLResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecuteNonQuerySQLResponse_descriptor_;
  metadata.reflection = ExecuteNonQuerySQLResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecuteQuerySQLRequest::kSqlFieldNumber;
#endif  // !_MSC_VER

ExecuteQuerySQLRequest::ExecuteQuerySQLRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecuteQuerySQLRequest::InitAsDefaultInstance() {
}

ExecuteQuerySQLRequest::ExecuteQuerySQLRequest(const ExecuteQuerySQLRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecuteQuerySQLRequest::SharedCtor() {
  _cached_size_ = 0;
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecuteQuerySQLRequest::~ExecuteQuerySQLRequest() {
  SharedDtor();
}

void ExecuteQuerySQLRequest::SharedDtor() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (this != default_instance_) {
  }
}

void ExecuteQuerySQLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteQuerySQLRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuteQuerySQLRequest_descriptor_;
}

const ExecuteQuerySQLRequest& ExecuteQuerySQLRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

ExecuteQuerySQLRequest* ExecuteQuerySQLRequest::default_instance_ = NULL;

ExecuteQuerySQLRequest* ExecuteQuerySQLRequest::New() const {
  return new ExecuteQuerySQLRequest;
}

void ExecuteQuerySQLRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::kEmptyString) {
        sql_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecuteQuerySQLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sql = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecuteQuerySQLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sql(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecuteQuerySQLRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sql = 1;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecuteQuerySQLRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sql = 1;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteQuerySQLRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecuteQuerySQLRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecuteQuerySQLRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecuteQuerySQLRequest::MergeFrom(const ExecuteQuerySQLRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sql()) {
      set_sql(from.sql());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecuteQuerySQLRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteQuerySQLRequest::CopyFrom(const ExecuteQuerySQLRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteQuerySQLRequest::IsInitialized() const {

  return true;
}

void ExecuteQuerySQLRequest::Swap(ExecuteQuerySQLRequest* other) {
  if (other != this) {
    std::swap(sql_, other->sql_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecuteQuerySQLRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecuteQuerySQLRequest_descriptor_;
  metadata.reflection = ExecuteQuerySQLRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecuteQuerySQLResponse::kTableFieldsFieldNumber;
const int ExecuteQuerySQLResponse::kTableValuesFieldNumber;
#endif  // !_MSC_VER

ExecuteQuerySQLResponse::ExecuteQuerySQLResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecuteQuerySQLResponse::InitAsDefaultInstance() {
}

ExecuteQuerySQLResponse::ExecuteQuerySQLResponse(const ExecuteQuerySQLResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecuteQuerySQLResponse::SharedCtor() {
  _cached_size_ = 0;
  table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecuteQuerySQLResponse::~ExecuteQuerySQLResponse() {
  SharedDtor();
}

void ExecuteQuerySQLResponse::SharedDtor() {
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    delete table_fields_;
  }
  if (this != default_instance_) {
  }
}

void ExecuteQuerySQLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteQuerySQLResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecuteQuerySQLResponse_descriptor_;
}

const ExecuteQuerySQLResponse& ExecuteQuerySQLResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddb_2eproto();
  return *default_instance_;
}

ExecuteQuerySQLResponse* ExecuteQuerySQLResponse::default_instance_ = NULL;

ExecuteQuerySQLResponse* ExecuteQuerySQLResponse::New() const {
  return new ExecuteQuerySQLResponse;
}

void ExecuteQuerySQLResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_fields()) {
      if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
        table_fields_->clear();
      }
    }
  }
  table_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecuteQuerySQLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_fields().data(), this->table_fields().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_values;
        break;
      }

      // repeated string table_values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_table_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_values(this->table_values_size() - 1).data(),
            this->table_values(this->table_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecuteQuerySQLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_fields = 1;
  if (has_table_fields()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_fields().data(), this->table_fields().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_fields(), output);
  }

  // repeated string table_values = 2;
  for (int i = 0; i < this->table_values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->table_values(i).data(), this->table_values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->table_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecuteQuerySQLResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_fields = 1;
  if (has_table_fields()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_fields().data(), this->table_fields().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_fields(), target);
  }

  // repeated string table_values = 2;
  for (int i = 0; i < this->table_values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_values(i).data(), this->table_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->table_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecuteQuerySQLResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_fields = 1;
    if (has_table_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_fields());
    }

  }
  // repeated string table_values = 2;
  total_size += 1 * this->table_values_size();
  for (int i = 0; i < this->table_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->table_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteQuerySQLResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecuteQuerySQLResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecuteQuerySQLResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecuteQuerySQLResponse::MergeFrom(const ExecuteQuerySQLResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_values_.MergeFrom(from.table_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_fields()) {
      set_table_fields(from.table_fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecuteQuerySQLResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteQuerySQLResponse::CopyFrom(const ExecuteQuerySQLResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteQuerySQLResponse::IsInitialized() const {

  return true;
}

void ExecuteQuerySQLResponse::Swap(ExecuteQuerySQLResponse* other) {
  if (other != this) {
    std::swap(table_fields_, other->table_fields_);
    table_values_.Swap(&other->table_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecuteQuerySQLResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecuteQuerySQLResponse_descriptor_;
  metadata.reflection = ExecuteQuerySQLResponse_reflection_;
  return metadata;
}


// ===================================================================

sql_service::~sql_service() {}

const ::google::protobuf::ServiceDescriptor* sql_service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_service_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* sql_service::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_service_descriptor_;
}

void sql_service::RequestNode(::google::protobuf::RpcController* controller,
                         const ::NodeRequest*,
                         ::NodeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestNode() not implemented.");
  done->Run();
}

void sql_service::ImportData(::google::protobuf::RpcController* controller,
                         const ::ImportDataRequest*,
                         ::ImportDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ImportData() not implemented.");
  done->Run();
}

void sql_service::DeleteTable(::google::protobuf::RpcController* controller,
                         const ::DeleteTempTableRequest*,
                         ::DeleteTempTableResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteTable() not implemented.");
  done->Run();
}

void sql_service::ExecuteNonQuerySQL(::google::protobuf::RpcController* controller,
                         const ::ExecuteNonQuerySQLRequest*,
                         ::ExecuteNonQuerySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExecuteNonQuerySQL() not implemented.");
  done->Run();
}

void sql_service::ExecuteQuerySQL(::google::protobuf::RpcController* controller,
                         const ::ExecuteQuerySQLRequest*,
                         ::ExecuteQuerySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExecuteQuerySQL() not implemented.");
  done->Run();
}

void sql_service::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), sql_service_descriptor_);
  switch(method->index()) {
    case 0:
      RequestNode(controller,
             ::google::protobuf::down_cast<const ::NodeRequest*>(request),
             ::google::protobuf::down_cast< ::NodeResponse*>(response),
             done);
      break;
    case 1:
      ImportData(controller,
             ::google::protobuf::down_cast<const ::ImportDataRequest*>(request),
             ::google::protobuf::down_cast< ::ImportDataResponse*>(response),
             done);
      break;
    case 2:
      DeleteTable(controller,
             ::google::protobuf::down_cast<const ::DeleteTempTableRequest*>(request),
             ::google::protobuf::down_cast< ::DeleteTempTableResponse*>(response),
             done);
      break;
    case 3:
      ExecuteNonQuerySQL(controller,
             ::google::protobuf::down_cast<const ::ExecuteNonQuerySQLRequest*>(request),
             ::google::protobuf::down_cast< ::ExecuteNonQuerySQLResponse*>(response),
             done);
      break;
    case 4:
      ExecuteQuerySQL(controller,
             ::google::protobuf::down_cast<const ::ExecuteQuerySQLRequest*>(request),
             ::google::protobuf::down_cast< ::ExecuteQuerySQLResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& sql_service::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NodeRequest::default_instance();
    case 1:
      return ::ImportDataRequest::default_instance();
    case 2:
      return ::DeleteTempTableRequest::default_instance();
    case 3:
      return ::ExecuteNonQuerySQLRequest::default_instance();
    case 4:
      return ::ExecuteQuerySQLRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& sql_service::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NodeResponse::default_instance();
    case 1:
      return ::ImportDataResponse::default_instance();
    case 2:
      return ::DeleteTempTableResponse::default_instance();
    case 3:
      return ::ExecuteNonQuerySQLResponse::default_instance();
    case 4:
      return ::ExecuteQuerySQLResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

sql_service_Stub::sql_service_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
sql_service_Stub::sql_service_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
sql_service_Stub::~sql_service_Stub() {
  if (owns_channel_) delete channel_;
}

void sql_service_Stub::RequestNode(::google::protobuf::RpcController* controller,
                              const ::NodeRequest* request,
                              ::NodeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void sql_service_Stub::ImportData(::google::protobuf::RpcController* controller,
                              const ::ImportDataRequest* request,
                              ::ImportDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void sql_service_Stub::DeleteTable(::google::protobuf::RpcController* controller,
                              const ::DeleteTempTableRequest* request,
                              ::DeleteTempTableResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void sql_service_Stub::ExecuteNonQuerySQL(::google::protobuf::RpcController* controller,
                              const ::ExecuteNonQuerySQLRequest* request,
                              ::ExecuteNonQuerySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void sql_service_Stub::ExecuteQuerySQL(::google::protobuf::RpcController* controller,
                              const ::ExecuteQuerySQLRequest* request,
                              ::ExecuteQuerySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

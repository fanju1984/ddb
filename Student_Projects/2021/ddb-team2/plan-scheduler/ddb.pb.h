// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddb.proto

#ifndef PROTOBUF_ddb_2eproto__INCLUDED
#define PROTOBUF_ddb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ddb_2eproto();
void protobuf_AssignDesc_ddb_2eproto();
void protobuf_ShutdownFile_ddb_2eproto();

class NodeRequest;
class NodeResponse;
class ImportDataRequest;
class ImportDataResponse;
class DeleteTempTableRequest;
class DeleteTempTableResponse;
class ExecuteNonQuerySQLRequest;
class ExecuteNonQuerySQLResponse;
class ExecuteQuerySQLRequest;
class ExecuteQuerySQLResponse;

// ===================================================================

class NodeRequest : public ::google::protobuf::Message {
 public:
  NodeRequest();
  virtual ~NodeRequest();

  NodeRequest(const NodeRequest& from);

  inline NodeRequest& operator=(const NodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeRequest& default_instance();

  void Swap(NodeRequest* other);

  // implements Message ----------------------------------------------

  NodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeRequest& from);
  void MergeFrom(const NodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string temp_table_name = 1;
  inline bool has_temp_table_name() const;
  inline void clear_temp_table_name();
  static const int kTempTableNameFieldNumber = 1;
  inline const ::std::string& temp_table_name() const;
  inline void set_temp_table_name(const ::std::string& value);
  inline void set_temp_table_name(const char* value);
  inline void set_temp_table_name(const char* value, size_t size);
  inline ::std::string* mutable_temp_table_name();
  inline ::std::string* release_temp_table_name();
  inline void set_allocated_temp_table_name(::std::string* temp_table_name);

  // @@protoc_insertion_point(class_scope:NodeRequest)
 private:
  inline void set_has_temp_table_name();
  inline void clear_has_temp_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* temp_table_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static NodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodeResponse : public ::google::protobuf::Message {
 public:
  NodeResponse();
  virtual ~NodeResponse();

  NodeResponse(const NodeResponse& from);

  inline NodeResponse& operator=(const NodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeResponse& default_instance();

  void Swap(NodeResponse* other);

  // implements Message ----------------------------------------------

  NodeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeResponse& from);
  void MergeFrom(const NodeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_fields = 1;
  inline bool has_table_fields() const;
  inline void clear_table_fields();
  static const int kTableFieldsFieldNumber = 1;
  inline const ::std::string& table_fields() const;
  inline void set_table_fields(const ::std::string& value);
  inline void set_table_fields(const char* value);
  inline void set_table_fields(const char* value, size_t size);
  inline ::std::string* mutable_table_fields();
  inline ::std::string* release_table_fields();
  inline void set_allocated_table_fields(::std::string* table_fields);

  // repeated string table_values = 2;
  inline int table_values_size() const;
  inline void clear_table_values();
  static const int kTableValuesFieldNumber = 2;
  inline const ::std::string& table_values(int index) const;
  inline ::std::string* mutable_table_values(int index);
  inline void set_table_values(int index, const ::std::string& value);
  inline void set_table_values(int index, const char* value);
  inline void set_table_values(int index, const char* value, size_t size);
  inline ::std::string* add_table_values();
  inline void add_table_values(const ::std::string& value);
  inline void add_table_values(const char* value);
  inline void add_table_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& table_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_table_values();

  // @@protoc_insertion_point(class_scope:NodeResponse)
 private:
  inline void set_has_table_fields();
  inline void clear_has_table_fields();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> table_values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static NodeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ImportDataRequest : public ::google::protobuf::Message {
 public:
  ImportDataRequest();
  virtual ~ImportDataRequest();

  ImportDataRequest(const ImportDataRequest& from);

  inline ImportDataRequest& operator=(const ImportDataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportDataRequest& default_instance();

  void Swap(ImportDataRequest* other);

  // implements Message ----------------------------------------------

  ImportDataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportDataRequest& from);
  void MergeFrom(const ImportDataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // optional string table_fields = 2;
  inline bool has_table_fields() const;
  inline void clear_table_fields();
  static const int kTableFieldsFieldNumber = 2;
  inline const ::std::string& table_fields() const;
  inline void set_table_fields(const ::std::string& value);
  inline void set_table_fields(const char* value);
  inline void set_table_fields(const char* value, size_t size);
  inline ::std::string* mutable_table_fields();
  inline ::std::string* release_table_fields();
  inline void set_allocated_table_fields(::std::string* table_fields);

  // repeated string table_values = 3;
  inline int table_values_size() const;
  inline void clear_table_values();
  static const int kTableValuesFieldNumber = 3;
  inline const ::std::string& table_values(int index) const;
  inline ::std::string* mutable_table_values(int index);
  inline void set_table_values(int index, const ::std::string& value);
  inline void set_table_values(int index, const char* value);
  inline void set_table_values(int index, const char* value, size_t size);
  inline ::std::string* add_table_values();
  inline void add_table_values(const ::std::string& value);
  inline void add_table_values(const char* value);
  inline void add_table_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& table_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_table_values();

  // @@protoc_insertion_point(class_scope:ImportDataRequest)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_table_fields();
  inline void clear_has_table_fields();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* table_fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> table_values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static ImportDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class ImportDataResponse : public ::google::protobuf::Message {
 public:
  ImportDataResponse();
  virtual ~ImportDataResponse();

  ImportDataResponse(const ImportDataResponse& from);

  inline ImportDataResponse& operator=(const ImportDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportDataResponse& default_instance();

  void Swap(ImportDataResponse* other);

  // implements Message ----------------------------------------------

  ImportDataResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportDataResponse& from);
  void MergeFrom(const ImportDataResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:ImportDataResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static ImportDataResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteTempTableRequest : public ::google::protobuf::Message {
 public:
  DeleteTempTableRequest();
  virtual ~DeleteTempTableRequest();

  DeleteTempTableRequest(const DeleteTempTableRequest& from);

  inline DeleteTempTableRequest& operator=(const DeleteTempTableRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTempTableRequest& default_instance();

  void Swap(DeleteTempTableRequest* other);

  // implements Message ----------------------------------------------

  DeleteTempTableRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteTempTableRequest& from);
  void MergeFrom(const DeleteTempTableRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string temp_table_name = 1;
  inline bool has_temp_table_name() const;
  inline void clear_temp_table_name();
  static const int kTempTableNameFieldNumber = 1;
  inline const ::std::string& temp_table_name() const;
  inline void set_temp_table_name(const ::std::string& value);
  inline void set_temp_table_name(const char* value);
  inline void set_temp_table_name(const char* value, size_t size);
  inline ::std::string* mutable_temp_table_name();
  inline ::std::string* release_temp_table_name();
  inline void set_allocated_temp_table_name(::std::string* temp_table_name);

  // @@protoc_insertion_point(class_scope:DeleteTempTableRequest)
 private:
  inline void set_has_temp_table_name();
  inline void clear_has_temp_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* temp_table_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static DeleteTempTableRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteTempTableResponse : public ::google::protobuf::Message {
 public:
  DeleteTempTableResponse();
  virtual ~DeleteTempTableResponse();

  DeleteTempTableResponse(const DeleteTempTableResponse& from);

  inline DeleteTempTableResponse& operator=(const DeleteTempTableResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTempTableResponse& default_instance();

  void Swap(DeleteTempTableResponse* other);

  // implements Message ----------------------------------------------

  DeleteTempTableResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteTempTableResponse& from);
  void MergeFrom(const DeleteTempTableResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:DeleteTempTableResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static DeleteTempTableResponse* default_instance_;
};
// -------------------------------------------------------------------

class ExecuteNonQuerySQLRequest : public ::google::protobuf::Message {
 public:
  ExecuteNonQuerySQLRequest();
  virtual ~ExecuteNonQuerySQLRequest();

  ExecuteNonQuerySQLRequest(const ExecuteNonQuerySQLRequest& from);

  inline ExecuteNonQuerySQLRequest& operator=(const ExecuteNonQuerySQLRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteNonQuerySQLRequest& default_instance();

  void Swap(ExecuteNonQuerySQLRequest* other);

  // implements Message ----------------------------------------------

  ExecuteNonQuerySQLRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecuteNonQuerySQLRequest& from);
  void MergeFrom(const ExecuteNonQuerySQLRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sql_query = 1;
  inline bool has_sql_query() const;
  inline void clear_sql_query();
  static const int kSqlQueryFieldNumber = 1;
  inline const ::std::string& sql_query() const;
  inline void set_sql_query(const ::std::string& value);
  inline void set_sql_query(const char* value);
  inline void set_sql_query(const char* value, size_t size);
  inline ::std::string* mutable_sql_query();
  inline ::std::string* release_sql_query();
  inline void set_allocated_sql_query(::std::string* sql_query);

  // @@protoc_insertion_point(class_scope:ExecuteNonQuerySQLRequest)
 private:
  inline void set_has_sql_query();
  inline void clear_has_sql_query();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sql_query_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static ExecuteNonQuerySQLRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExecuteNonQuerySQLResponse : public ::google::protobuf::Message {
 public:
  ExecuteNonQuerySQLResponse();
  virtual ~ExecuteNonQuerySQLResponse();

  ExecuteNonQuerySQLResponse(const ExecuteNonQuerySQLResponse& from);

  inline ExecuteNonQuerySQLResponse& operator=(const ExecuteNonQuerySQLResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteNonQuerySQLResponse& default_instance();

  void Swap(ExecuteNonQuerySQLResponse* other);

  // implements Message ----------------------------------------------

  ExecuteNonQuerySQLResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecuteNonQuerySQLResponse& from);
  void MergeFrom(const ExecuteNonQuerySQLResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:ExecuteNonQuerySQLResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static ExecuteNonQuerySQLResponse* default_instance_;
};
// -------------------------------------------------------------------

class ExecuteQuerySQLRequest : public ::google::protobuf::Message {
 public:
  ExecuteQuerySQLRequest();
  virtual ~ExecuteQuerySQLRequest();

  ExecuteQuerySQLRequest(const ExecuteQuerySQLRequest& from);

  inline ExecuteQuerySQLRequest& operator=(const ExecuteQuerySQLRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteQuerySQLRequest& default_instance();

  void Swap(ExecuteQuerySQLRequest* other);

  // implements Message ----------------------------------------------

  ExecuteQuerySQLRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecuteQuerySQLRequest& from);
  void MergeFrom(const ExecuteQuerySQLRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sql = 1;
  inline bool has_sql() const;
  inline void clear_sql();
  static const int kSqlFieldNumber = 1;
  inline const ::std::string& sql() const;
  inline void set_sql(const ::std::string& value);
  inline void set_sql(const char* value);
  inline void set_sql(const char* value, size_t size);
  inline ::std::string* mutable_sql();
  inline ::std::string* release_sql();
  inline void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:ExecuteQuerySQLRequest)
 private:
  inline void set_has_sql();
  inline void clear_has_sql();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sql_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static ExecuteQuerySQLRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExecuteQuerySQLResponse : public ::google::protobuf::Message {
 public:
  ExecuteQuerySQLResponse();
  virtual ~ExecuteQuerySQLResponse();

  ExecuteQuerySQLResponse(const ExecuteQuerySQLResponse& from);

  inline ExecuteQuerySQLResponse& operator=(const ExecuteQuerySQLResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteQuerySQLResponse& default_instance();

  void Swap(ExecuteQuerySQLResponse* other);

  // implements Message ----------------------------------------------

  ExecuteQuerySQLResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecuteQuerySQLResponse& from);
  void MergeFrom(const ExecuteQuerySQLResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_fields = 1;
  inline bool has_table_fields() const;
  inline void clear_table_fields();
  static const int kTableFieldsFieldNumber = 1;
  inline const ::std::string& table_fields() const;
  inline void set_table_fields(const ::std::string& value);
  inline void set_table_fields(const char* value);
  inline void set_table_fields(const char* value, size_t size);
  inline ::std::string* mutable_table_fields();
  inline ::std::string* release_table_fields();
  inline void set_allocated_table_fields(::std::string* table_fields);

  // repeated string table_values = 2;
  inline int table_values_size() const;
  inline void clear_table_values();
  static const int kTableValuesFieldNumber = 2;
  inline const ::std::string& table_values(int index) const;
  inline ::std::string* mutable_table_values(int index);
  inline void set_table_values(int index, const ::std::string& value);
  inline void set_table_values(int index, const char* value);
  inline void set_table_values(int index, const char* value, size_t size);
  inline ::std::string* add_table_values();
  inline void add_table_values(const ::std::string& value);
  inline void add_table_values(const char* value);
  inline void add_table_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& table_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_table_values();

  // @@protoc_insertion_point(class_scope:ExecuteQuerySQLResponse)
 private:
  inline void set_has_table_fields();
  inline void clear_has_table_fields();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> table_values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ddb_2eproto();
  friend void protobuf_AssignDesc_ddb_2eproto();
  friend void protobuf_ShutdownFile_ddb_2eproto();

  void InitAsDefaultInstance();
  static ExecuteQuerySQLResponse* default_instance_;
};
// ===================================================================

class sql_service_Stub;

class sql_service : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline sql_service() {};
 public:
  virtual ~sql_service();

  typedef sql_service_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void RequestNode(::google::protobuf::RpcController* controller,
                       const ::NodeRequest* request,
                       ::NodeResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ImportData(::google::protobuf::RpcController* controller,
                       const ::ImportDataRequest* request,
                       ::ImportDataResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteTable(::google::protobuf::RpcController* controller,
                       const ::DeleteTempTableRequest* request,
                       ::DeleteTempTableResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ExecuteNonQuerySQL(::google::protobuf::RpcController* controller,
                       const ::ExecuteNonQuerySQLRequest* request,
                       ::ExecuteNonQuerySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ExecuteQuerySQL(::google::protobuf::RpcController* controller,
                       const ::ExecuteQuerySQLRequest* request,
                       ::ExecuteQuerySQLResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(sql_service);
};

class sql_service_Stub : public sql_service {
 public:
  sql_service_Stub(::google::protobuf::RpcChannel* channel);
  sql_service_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~sql_service_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements sql_service ------------------------------------------

  void RequestNode(::google::protobuf::RpcController* controller,
                       const ::NodeRequest* request,
                       ::NodeResponse* response,
                       ::google::protobuf::Closure* done);
  void ImportData(::google::protobuf::RpcController* controller,
                       const ::ImportDataRequest* request,
                       ::ImportDataResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteTable(::google::protobuf::RpcController* controller,
                       const ::DeleteTempTableRequest* request,
                       ::DeleteTempTableResponse* response,
                       ::google::protobuf::Closure* done);
  void ExecuteNonQuerySQL(::google::protobuf::RpcController* controller,
                       const ::ExecuteNonQuerySQLRequest* request,
                       ::ExecuteNonQuerySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void ExecuteQuerySQL(::google::protobuf::RpcController* controller,
                       const ::ExecuteQuerySQLRequest* request,
                       ::ExecuteQuerySQLResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(sql_service_Stub);
};


// ===================================================================


// ===================================================================

// NodeRequest

// optional string temp_table_name = 1;
inline bool NodeRequest::has_temp_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeRequest::set_has_temp_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeRequest::clear_has_temp_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeRequest::clear_temp_table_name() {
  if (temp_table_name_ != &::google::protobuf::internal::kEmptyString) {
    temp_table_name_->clear();
  }
  clear_has_temp_table_name();
}
inline const ::std::string& NodeRequest::temp_table_name() const {
  return *temp_table_name_;
}
inline void NodeRequest::set_temp_table_name(const ::std::string& value) {
  set_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    temp_table_name_ = new ::std::string;
  }
  temp_table_name_->assign(value);
}
inline void NodeRequest::set_temp_table_name(const char* value) {
  set_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    temp_table_name_ = new ::std::string;
  }
  temp_table_name_->assign(value);
}
inline void NodeRequest::set_temp_table_name(const char* value, size_t size) {
  set_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    temp_table_name_ = new ::std::string;
  }
  temp_table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeRequest::mutable_temp_table_name() {
  set_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    temp_table_name_ = new ::std::string;
  }
  return temp_table_name_;
}
inline ::std::string* NodeRequest::release_temp_table_name() {
  clear_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = temp_table_name_;
    temp_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeRequest::set_allocated_temp_table_name(::std::string* temp_table_name) {
  if (temp_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_table_name_;
  }
  if (temp_table_name) {
    set_has_temp_table_name();
    temp_table_name_ = temp_table_name;
  } else {
    clear_has_temp_table_name();
    temp_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NodeResponse

// optional string table_fields = 1;
inline bool NodeResponse::has_table_fields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeResponse::set_has_table_fields() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeResponse::clear_has_table_fields() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeResponse::clear_table_fields() {
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    table_fields_->clear();
  }
  clear_has_table_fields();
}
inline const ::std::string& NodeResponse::table_fields() const {
  return *table_fields_;
}
inline void NodeResponse::set_table_fields(const ::std::string& value) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(value);
}
inline void NodeResponse::set_table_fields(const char* value) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(value);
}
inline void NodeResponse::set_table_fields(const char* value, size_t size) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeResponse::mutable_table_fields() {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  return table_fields_;
}
inline ::std::string* NodeResponse::release_table_fields() {
  clear_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_fields_;
    table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeResponse::set_allocated_table_fields(::std::string* table_fields) {
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    delete table_fields_;
  }
  if (table_fields) {
    set_has_table_fields();
    table_fields_ = table_fields;
  } else {
    clear_has_table_fields();
    table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string table_values = 2;
inline int NodeResponse::table_values_size() const {
  return table_values_.size();
}
inline void NodeResponse::clear_table_values() {
  table_values_.Clear();
}
inline const ::std::string& NodeResponse::table_values(int index) const {
  return table_values_.Get(index);
}
inline ::std::string* NodeResponse::mutable_table_values(int index) {
  return table_values_.Mutable(index);
}
inline void NodeResponse::set_table_values(int index, const ::std::string& value) {
  table_values_.Mutable(index)->assign(value);
}
inline void NodeResponse::set_table_values(int index, const char* value) {
  table_values_.Mutable(index)->assign(value);
}
inline void NodeResponse::set_table_values(int index, const char* value, size_t size) {
  table_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeResponse::add_table_values() {
  return table_values_.Add();
}
inline void NodeResponse::add_table_values(const ::std::string& value) {
  table_values_.Add()->assign(value);
}
inline void NodeResponse::add_table_values(const char* value) {
  table_values_.Add()->assign(value);
}
inline void NodeResponse::add_table_values(const char* value, size_t size) {
  table_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeResponse::table_values() const {
  return table_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeResponse::mutable_table_values() {
  return &table_values_;
}

// -------------------------------------------------------------------

// ImportDataRequest

// optional string table_name = 1;
inline bool ImportDataRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportDataRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportDataRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportDataRequest::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& ImportDataRequest::table_name() const {
  return *table_name_;
}
inline void ImportDataRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ImportDataRequest::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void ImportDataRequest::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportDataRequest::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* ImportDataRequest::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImportDataRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string table_fields = 2;
inline bool ImportDataRequest::has_table_fields() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportDataRequest::set_has_table_fields() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportDataRequest::clear_has_table_fields() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportDataRequest::clear_table_fields() {
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    table_fields_->clear();
  }
  clear_has_table_fields();
}
inline const ::std::string& ImportDataRequest::table_fields() const {
  return *table_fields_;
}
inline void ImportDataRequest::set_table_fields(const ::std::string& value) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(value);
}
inline void ImportDataRequest::set_table_fields(const char* value) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(value);
}
inline void ImportDataRequest::set_table_fields(const char* value, size_t size) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportDataRequest::mutable_table_fields() {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  return table_fields_;
}
inline ::std::string* ImportDataRequest::release_table_fields() {
  clear_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_fields_;
    table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImportDataRequest::set_allocated_table_fields(::std::string* table_fields) {
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    delete table_fields_;
  }
  if (table_fields) {
    set_has_table_fields();
    table_fields_ = table_fields;
  } else {
    clear_has_table_fields();
    table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string table_values = 3;
inline int ImportDataRequest::table_values_size() const {
  return table_values_.size();
}
inline void ImportDataRequest::clear_table_values() {
  table_values_.Clear();
}
inline const ::std::string& ImportDataRequest::table_values(int index) const {
  return table_values_.Get(index);
}
inline ::std::string* ImportDataRequest::mutable_table_values(int index) {
  return table_values_.Mutable(index);
}
inline void ImportDataRequest::set_table_values(int index, const ::std::string& value) {
  table_values_.Mutable(index)->assign(value);
}
inline void ImportDataRequest::set_table_values(int index, const char* value) {
  table_values_.Mutable(index)->assign(value);
}
inline void ImportDataRequest::set_table_values(int index, const char* value, size_t size) {
  table_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportDataRequest::add_table_values() {
  return table_values_.Add();
}
inline void ImportDataRequest::add_table_values(const ::std::string& value) {
  table_values_.Add()->assign(value);
}
inline void ImportDataRequest::add_table_values(const char* value) {
  table_values_.Add()->assign(value);
}
inline void ImportDataRequest::add_table_values(const char* value, size_t size) {
  table_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImportDataRequest::table_values() const {
  return table_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImportDataRequest::mutable_table_values() {
  return &table_values_;
}

// -------------------------------------------------------------------

// ImportDataResponse

// optional string result = 1;
inline bool ImportDataResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportDataResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportDataResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportDataResponse::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& ImportDataResponse::result() const {
  return *result_;
}
inline void ImportDataResponse::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void ImportDataResponse::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void ImportDataResponse::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportDataResponse::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* ImportDataResponse::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImportDataResponse::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DeleteTempTableRequest

// optional string temp_table_name = 1;
inline bool DeleteTempTableRequest::has_temp_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteTempTableRequest::set_has_temp_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteTempTableRequest::clear_has_temp_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteTempTableRequest::clear_temp_table_name() {
  if (temp_table_name_ != &::google::protobuf::internal::kEmptyString) {
    temp_table_name_->clear();
  }
  clear_has_temp_table_name();
}
inline const ::std::string& DeleteTempTableRequest::temp_table_name() const {
  return *temp_table_name_;
}
inline void DeleteTempTableRequest::set_temp_table_name(const ::std::string& value) {
  set_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    temp_table_name_ = new ::std::string;
  }
  temp_table_name_->assign(value);
}
inline void DeleteTempTableRequest::set_temp_table_name(const char* value) {
  set_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    temp_table_name_ = new ::std::string;
  }
  temp_table_name_->assign(value);
}
inline void DeleteTempTableRequest::set_temp_table_name(const char* value, size_t size) {
  set_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    temp_table_name_ = new ::std::string;
  }
  temp_table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteTempTableRequest::mutable_temp_table_name() {
  set_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    temp_table_name_ = new ::std::string;
  }
  return temp_table_name_;
}
inline ::std::string* DeleteTempTableRequest::release_temp_table_name() {
  clear_has_temp_table_name();
  if (temp_table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = temp_table_name_;
    temp_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeleteTempTableRequest::set_allocated_temp_table_name(::std::string* temp_table_name) {
  if (temp_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete temp_table_name_;
  }
  if (temp_table_name) {
    set_has_temp_table_name();
    temp_table_name_ = temp_table_name;
  } else {
    clear_has_temp_table_name();
    temp_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DeleteTempTableResponse

// optional string result = 1;
inline bool DeleteTempTableResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteTempTableResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteTempTableResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteTempTableResponse::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& DeleteTempTableResponse::result() const {
  return *result_;
}
inline void DeleteTempTableResponse::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void DeleteTempTableResponse::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void DeleteTempTableResponse::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteTempTableResponse::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* DeleteTempTableResponse::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeleteTempTableResponse::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExecuteNonQuerySQLRequest

// optional string sql_query = 1;
inline bool ExecuteNonQuerySQLRequest::has_sql_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecuteNonQuerySQLRequest::set_has_sql_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecuteNonQuerySQLRequest::clear_has_sql_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecuteNonQuerySQLRequest::clear_sql_query() {
  if (sql_query_ != &::google::protobuf::internal::kEmptyString) {
    sql_query_->clear();
  }
  clear_has_sql_query();
}
inline const ::std::string& ExecuteNonQuerySQLRequest::sql_query() const {
  return *sql_query_;
}
inline void ExecuteNonQuerySQLRequest::set_sql_query(const ::std::string& value) {
  set_has_sql_query();
  if (sql_query_ == &::google::protobuf::internal::kEmptyString) {
    sql_query_ = new ::std::string;
  }
  sql_query_->assign(value);
}
inline void ExecuteNonQuerySQLRequest::set_sql_query(const char* value) {
  set_has_sql_query();
  if (sql_query_ == &::google::protobuf::internal::kEmptyString) {
    sql_query_ = new ::std::string;
  }
  sql_query_->assign(value);
}
inline void ExecuteNonQuerySQLRequest::set_sql_query(const char* value, size_t size) {
  set_has_sql_query();
  if (sql_query_ == &::google::protobuf::internal::kEmptyString) {
    sql_query_ = new ::std::string;
  }
  sql_query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecuteNonQuerySQLRequest::mutable_sql_query() {
  set_has_sql_query();
  if (sql_query_ == &::google::protobuf::internal::kEmptyString) {
    sql_query_ = new ::std::string;
  }
  return sql_query_;
}
inline ::std::string* ExecuteNonQuerySQLRequest::release_sql_query() {
  clear_has_sql_query();
  if (sql_query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sql_query_;
    sql_query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecuteNonQuerySQLRequest::set_allocated_sql_query(::std::string* sql_query) {
  if (sql_query_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_query_;
  }
  if (sql_query) {
    set_has_sql_query();
    sql_query_ = sql_query;
  } else {
    clear_has_sql_query();
    sql_query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExecuteNonQuerySQLResponse

// optional string result = 1;
inline bool ExecuteNonQuerySQLResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecuteNonQuerySQLResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecuteNonQuerySQLResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecuteNonQuerySQLResponse::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& ExecuteNonQuerySQLResponse::result() const {
  return *result_;
}
inline void ExecuteNonQuerySQLResponse::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void ExecuteNonQuerySQLResponse::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void ExecuteNonQuerySQLResponse::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecuteNonQuerySQLResponse::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* ExecuteNonQuerySQLResponse::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecuteNonQuerySQLResponse::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExecuteQuerySQLRequest

// optional string sql = 1;
inline bool ExecuteQuerySQLRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecuteQuerySQLRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecuteQuerySQLRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecuteQuerySQLRequest::clear_sql() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    sql_->clear();
  }
  clear_has_sql();
}
inline const ::std::string& ExecuteQuerySQLRequest::sql() const {
  return *sql_;
}
inline void ExecuteQuerySQLRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void ExecuteQuerySQLRequest::set_sql(const char* value) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(value);
}
inline void ExecuteQuerySQLRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  sql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecuteQuerySQLRequest::mutable_sql() {
  set_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    sql_ = new ::std::string;
  }
  return sql_;
}
inline ::std::string* ExecuteQuerySQLRequest::release_sql() {
  clear_has_sql();
  if (sql_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sql_;
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecuteQuerySQLRequest::set_allocated_sql(::std::string* sql) {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (sql) {
    set_has_sql();
    sql_ = sql;
  } else {
    clear_has_sql();
    sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExecuteQuerySQLResponse

// optional string table_fields = 1;
inline bool ExecuteQuerySQLResponse::has_table_fields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecuteQuerySQLResponse::set_has_table_fields() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecuteQuerySQLResponse::clear_has_table_fields() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecuteQuerySQLResponse::clear_table_fields() {
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    table_fields_->clear();
  }
  clear_has_table_fields();
}
inline const ::std::string& ExecuteQuerySQLResponse::table_fields() const {
  return *table_fields_;
}
inline void ExecuteQuerySQLResponse::set_table_fields(const ::std::string& value) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(value);
}
inline void ExecuteQuerySQLResponse::set_table_fields(const char* value) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(value);
}
inline void ExecuteQuerySQLResponse::set_table_fields(const char* value, size_t size) {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  table_fields_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecuteQuerySQLResponse::mutable_table_fields() {
  set_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    table_fields_ = new ::std::string;
  }
  return table_fields_;
}
inline ::std::string* ExecuteQuerySQLResponse::release_table_fields() {
  clear_has_table_fields();
  if (table_fields_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_fields_;
    table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExecuteQuerySQLResponse::set_allocated_table_fields(::std::string* table_fields) {
  if (table_fields_ != &::google::protobuf::internal::kEmptyString) {
    delete table_fields_;
  }
  if (table_fields) {
    set_has_table_fields();
    table_fields_ = table_fields;
  } else {
    clear_has_table_fields();
    table_fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string table_values = 2;
inline int ExecuteQuerySQLResponse::table_values_size() const {
  return table_values_.size();
}
inline void ExecuteQuerySQLResponse::clear_table_values() {
  table_values_.Clear();
}
inline const ::std::string& ExecuteQuerySQLResponse::table_values(int index) const {
  return table_values_.Get(index);
}
inline ::std::string* ExecuteQuerySQLResponse::mutable_table_values(int index) {
  return table_values_.Mutable(index);
}
inline void ExecuteQuerySQLResponse::set_table_values(int index, const ::std::string& value) {
  table_values_.Mutable(index)->assign(value);
}
inline void ExecuteQuerySQLResponse::set_table_values(int index, const char* value) {
  table_values_.Mutable(index)->assign(value);
}
inline void ExecuteQuerySQLResponse::set_table_values(int index, const char* value, size_t size) {
  table_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExecuteQuerySQLResponse::add_table_values() {
  return table_values_.Add();
}
inline void ExecuteQuerySQLResponse::add_table_values(const ::std::string& value) {
  table_values_.Add()->assign(value);
}
inline void ExecuteQuerySQLResponse::add_table_values(const char* value) {
  table_values_.Add()->assign(value);
}
inline void ExecuteQuerySQLResponse::add_table_values(const char* value, size_t size) {
  table_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecuteQuerySQLResponse::table_values() const {
  return table_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExecuteQuerySQLResponse::mutable_table_values() {
  return &table_values_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ddb_2eproto__INCLUDED
